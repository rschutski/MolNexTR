[tool.poetry]
name = "MolNexTR"
version = "0.0.1"
description = "This is package for the MolNexTR model for optical chemical structure recognition based on Transformer and ConvNext dual-stream architecture"
authors = ["Insilico Medicine"]
packages = [
    { include = "MolNexTR" }
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dependencies]
poetry = "^2.1.1"
python = ">=3.10.0,<3.11"
pytorch-lightning = ">=1.9.0"
rdkit-pypi = ">=2022.9.5"
pyonmttok = ">=1.37.1"
timm = ">=0.4.12"
albumentations = ">=1.1.0"
transformers = "4.51.3"  # https://github.com/huggingface/transformers/issues?q=get_default_device
smilespe = ">=0.0.3"

[tool.poetry.group.dev.dependencies]
mypy = "*"
ruff = "*"
pylint = "*"

[tool.poetry.group.local.dependencies]
ipykernel = "*"
python-dotenv = "^1.0.1"

[tool.ruff]
src = ["src", "tests", "notebooks"]
extend-exclude = ["__pycache__"]
line-length = 100
target-version = "py310"
output-format = "grouped"
show-fixes = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "PL",  # pylint
    "I",  # isort
    "N",  # pep8-naming
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP",  # pyupgrade
    "RUF",  # ruff-specific rules
    "NPY",  # numpy-specific rules
]
ignore-init-module-imports = true

[tool.ruff.lint.isort]
known-first-party = ["src", "tests"]

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["pydantic.validator"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.format]
quote-style = "single"
indent-style = "space"

[tool.mypy]
python_version = "3.10"
exclude = "examples|exps|figure"
plugins = [
  "pydantic.mypy",
]
show_error_codes = true
show_error_context = true
# https://mypy.readthedocs.io/en/stable/existing_code.html#introduce-stricter-options
strict = true

[[tool.mypy.overrides]]
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pylint]
extension-pkg-allow-list = ["rdkit"]

[tool.pylint."MESSAGES CONTROL"]
# We disable unspecified-encoding as we run our code in the same linux-based docker container only
disable = [
    "unspecified-encoding",
    "too-few-public-methods",
    "too-many-arguments",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "import-outside-toplevel",
]
# Ignore pylint/pydantic and pylint/langchain conflicts
ignored-classes = [
    "FieldInfo",
    "BaseTool"
]
ignored-argument-names = "args"

